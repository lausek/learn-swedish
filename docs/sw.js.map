{"mappings":"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","sources":["<anon>","node_modules/@parcel/service-worker/runtime-bec5d7fb171caddd.js","node_modules/@parcel/service-worker/service-worker.js","src/sw.js","node_modules/workbox-routing/index.mjs","node_modules/workbox-routing/index.js","node_modules/workbox-routing/NavigationRoute.js","node_modules/workbox-core/_private/assert.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/models/messages/messages.js","node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/Router.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-routing/setCatchHandler.js","node_modules/workbox-routing/setDefaultHandler.js","node_modules/workbox-precaching/index.mjs","node_modules/workbox-precaching/index.js","node_modules/workbox-precaching/addPlugins.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/waitUntil.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","node_modules/workbox-precaching/utils/printCleanupDetails.js","node_modules/workbox-precaching/utils/printInstallDetails.js","node_modules/workbox-precaching/PrecacheStrategy.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-precaching/PrecacheRoute.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-precaching/cleanupOutdatedCaches.js","node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","node_modules/workbox-precaching/createHandlerBoundToURL.js","node_modules/workbox-precaching/getCacheKeyForURL.js","node_modules/workbox-precaching/matchPrecache.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/precacheAndRoute.js","node_modules/workbox-precaching/PrecacheFallbackPlugin.js","node_modules/workbox-precaching/_types.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $08a0c455a045a80f$exports = {};\nlet $2039b88b1be162b9$export$e538f94cc8cf4db8 = [];\nlet $2039b88b1be162b9$export$83d89fbfd8236492 = \"\";\nfunction $2039b88b1be162b9$export$c208e1278d7beb2(m, v) {\n    $2039b88b1be162b9$export$e538f94cc8cf4db8 = m;\n    $2039b88b1be162b9$export$83d89fbfd8236492 = v;\n}\n\n\nconst $08a0c455a045a80f$var$manifest = [\n    \"/learn-swedish/index.html\",\n    \"/learn-swedish/manifest.webmanifest\",\n    \"/learn-swedish/android-chrome-192x192.626f50e2.png\",\n    \"/learn-swedish/android-chrome-512x512.d6bf5e41.png\",\n    \"/learn-swedish/favicon-32x32.e142a89f.png\",\n    \"/learn-swedish/favicon-16x16.8ee22d3e.png\",\n    \"/learn-swedish/apple-touch-icon.bcec069d.png\",\n    \"/learn-swedish/index.4ee8d03c.css\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCRc4EsA.8895cd13.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fABc4EsA.303b9afa.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCBc4EsA.73ef051e.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fBxc4EsA.962b7627.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCxc4EsA.6fb53ea7.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fChc4EsA.51d7b0c4.woff2\",\n    \"/learn-swedish/KFOlCnqEu92Fr1MmSU5fBBc4.d07a8413.woff2\",\n    \"/learn-swedish/index.9aea524e.js\",\n    \"/learn-swedish/index.e1fa17d3.js\"\n];\nconst $08a0c455a045a80f$var$version = \"a787ad97\";\n(0, $2039b88b1be162b9$export$c208e1278d7beb2)($08a0c455a045a80f$var$manifest, $08a0c455a045a80f$var$version);\n\nvar $be54d8e7a0d8ad61$exports = {};\n\n$parcel$export($be54d8e7a0d8ad61$exports, \"isNav\", () => $be54d8e7a0d8ad61$export$86641f86553f00db);\n$parcel$export($be54d8e7a0d8ad61$exports, \"NETWORK_HANDLER\", () => $be54d8e7a0d8ad61$export$7725882a84549c2d);\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \"use strict\";\n// @ts-ignore\ntry {\n    self[\"workbox:core:7.0.0\"] && _();\n} catch (e) {}\n\n\nconst $a46abd7b77df5505$export$defe85febe8b728c = {\n    \"invalid-value\": ({ paramName: paramName, validValueDescription: validValueDescription, value: value })=>{\n        if (!paramName || !validValueDescription) throw new Error(`Unexpected input to 'invalid-value' error.`);\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) throw new Error(`Unexpected input to 'not-an-array' error.`);\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType: expectedType, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName: expectedClassName, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName, isReturnValueProblem: isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) return `The return value from ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod: expectedMethod, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry: entry })=>{\n        return `An unexpected entry was passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` + `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` + `strings with one or more characters, objects with a url property or ` + `Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry: firstEntry, secondEntry: secondEntry })=>{\n        if (!firstEntry || !secondEntry) throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${firstEntry} but different revision details. Workbox is ` + `unable to cache and version the asset correctly. Please remove one ` + `of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage: thrownErrorMessage })=>{\n        if (!thrownErrorMessage) throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` + `The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId: cacheNameId, value: value })=>{\n        if (!cacheNameId) throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        return `You must provide a name containing at least one character for ` + `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` + `'${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method: method })=>{\n        if (!method) throw new Error(`Unexpected input to ` + `'unregister-route-but-not-found-with-method' error.`);\n        return `The route you're trying to unregister was not  previously ` + `registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + `registered.`;\n    },\n    \"queue-replay-failed\": ({ name: name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name: name })=>{\n        return `The Queue name '${name}' is already being used. ` + `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName: methodName, paramName: paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. ` + `Please check the docs for ${moduleName}.${className}.${funcName} for ` + `valid input types.`;\n    },\n    \"not-array-of-class\": ({ value: value, expectedClass: expectedClass, moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of ` + `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` + `Please check the call to ${moduleName}.${className}.${funcName}() ` + `to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName: moduleName, className: className, funcName: funcName })=>{\n        return `You must define either config.maxEntries or config.maxAgeSeconds` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName: moduleName, className: className, funcName: funcName })=>{\n        return `You must define either config.statuses or config.headers` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    \"invalid-string\": ({ moduleName: moduleName, funcName: funcName, paramName: paramName })=>{\n        if (!paramName || !moduleName || !funcName) throw new Error(`Unexpected input to 'invalid-string' error.`);\n        return `When using strings, the '${paramName}' parameter must start with ` + `'http' (for cross-origin matches) or '/' (for same-origin matches). ` + `Please see the docs for ${moduleName}.${funcName}() for ` + `more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return `You must provide a channelName to construct a ` + `BroadcastCacheUpdate instance.`;\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return `The arguments passed into responsesAreSame() appear to be ` + `invalid. Please ensure valid Responses are used.`;\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + `expiration plugin with a runtime caching strategy.`;\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` + `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'single-range-only' error.`);\n        return `Multiple ranges are not supported. Please use a  single start ` + `value, and optional end value. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        return `The Range header is missing both start and end values. At least ` + `one of those values is needed. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return `No Range header was found in the Request provided.`;\n    },\n    \"range-not-satisfiable\": ({ size: size, start: start, end: end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url: url, method: method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and ` + `only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url: url })=>{\n        return `There was an attempt to cache '${url}' but the response was not ` + `defined.`;\n    },\n    \"no-response\": ({ url: url, error: error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) message += ` The underlying error is ${error}.`;\n        return message;\n    },\n    \"bad-precaching-response\": ({ url: url, status: status })=>{\n        return `The precaching request for '${url}' failed` + (status ? ` with an HTTP status of ${status}.` : `.`);\n    },\n    \"non-precached-url\": ({ url: url })=>{\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` + `not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url: url })=>{\n        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName: cacheName, url: url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin: origin })=>{\n        return `workbox-core.copyResponse() can only be used with same-origin ` + `responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type: type })=>{\n        const message = `One of the workbox-streams sources resulted in an ` + `'${type}' response.`;\n        if (type === \"opaqueredirect\") return `${message} Please do not use a navigation request that results ` + `in a redirect as a source.`;\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\n\n\nconst $a1b33374bd859908$var$fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) msg += ` :: ${JSON.stringify(args)}`;\n    return msg;\n};\nconst $a1b33374bd859908$var$generatorFunction = (code, details = {})=>{\n    const message = (0, $a46abd7b77df5505$export$defe85febe8b728c)[code];\n    if (!message) throw new Error(`Unable to find message for code '${code}'.`);\n    return message(details);\n};\nconst $a1b33374bd859908$export$9b6405cf8a618e2b = $a1b33374bd859908$var$fallback;\n\n\n\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */ class $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3 extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */ constructor(errorCode, details){\n        const message = (0, $a1b33374bd859908$export$9b6405cf8a618e2b)(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\n\n\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */ const $fe99a7162eb260e0$var$isArray = (value, details)=>{\n    if (!Array.isArray(value)) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"not-an-array\", details);\n};\nconst $fe99a7162eb260e0$var$hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details[\"expectedMethod\"] = expectedMethod;\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"missing-a-method\", details);\n    }\n};\nconst $fe99a7162eb260e0$var$isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details[\"expectedType\"] = expectedType;\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"incorrect-type\", details);\n    }\n};\nconst $fe99a7162eb260e0$var$isInstance = (object, // Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details[\"expectedClassName\"] = expectedClass.name;\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"incorrect-class\", details);\n    }\n};\nconst $fe99a7162eb260e0$var$isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details[\"validValueDescription\"] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"invalid-value\", details);\n    }\n};\nconst $fe99a7162eb260e0$var$isArrayOfClass = (value, // Need general type to do check later.\nexpectedClass, details)=>{\n    const error = new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) throw error;\n    for (const item of value){\n        if (!(item instanceof expectedClass)) throw error;\n    }\n};\nconst $fe99a7162eb260e0$export$a7a9523472993e97 = null;\n\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nconst $af496a6b7d1cad7b$export$af88d00dbe7f521 = null;\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \"use strict\";\n// @ts-ignore\ntry {\n    self[\"workbox:routing:7.0.0\"] && _();\n} catch (e) {}\n\n\nconst $36faf902815edd49$export$23aa776992c05e54 = \"GET\";\nconst $36faf902815edd49$export$7ad73ab44ad732c0 = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\"\n];\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\nconst $c0a03a80a6a79546$export$c3ccfd7381bc479 = (handler)=>{\n    if (handler && typeof handler === \"object\") return handler;\n    else return {\n        handle: handler\n    };\n};\n\n\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */ class $0440a5d6d8eea4e0$export$e7b0ac011bb776c6 {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */ constructor(match, handler, method = (0, $36faf902815edd49$export$23aa776992c05e54)){\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = (0, $c0a03a80a6a79546$export$c3ccfd7381bc479)(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */ setCatchHandler(handler) {\n        this.catchHandler = (0, $c0a03a80a6a79546$export$c3ccfd7381bc479)(handler);\n    }\n}\n\n\n\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */ class $9e6fe1fcddb56af8$export$862778e4617eab43 extends (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6) {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */ constructor(handler, { allowlist: allowlist = [\n        /./\n    ], denylist: denylist = [] } = {}){\n        super((options)=>this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */ _match({ url: url, request: request }) {\n        if (request && request.mode !== \"navigate\") return false;\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist){\n            if (regExp.test(pathnameAndSearch)) return false;\n        }\n        if (this._allowlist.some((regExp)=>regExp.test(pathnameAndSearch))) return true;\n        return false;\n    }\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n\n\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */ class $a797a3f64ccfe22f$export$dadc8067e88ff641 extends (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6) {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */ constructor(regExp, handler, method){\n        const match = ({ url: url })=>{\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) return;\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) return;\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nconst $f5c0d3ad7d5ed2c2$export$ea94e9f18324709a = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\n\n\n\n\n\n\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */ class $9c594ba77bae5357$export$55185c17a0fcbe46 {\n    /**\n     * Initializes a new Router.\n     */ constructor(){\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */ get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */ addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener(\"fetch\", (event)=>{\n            const { request: request } = event;\n            const responsePromise = this.handleRequest({\n                request: request,\n                event: event\n            });\n            if (responsePromise) event.respondWith(responsePromise);\n        });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */ addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener(\"message\", (event)=>{\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === \"CACHE_URLS\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload: payload } = event.data;\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                    if (typeof entry === \"string\") entry = [\n                        entry\n                    ];\n                    const request = new Request(...entry);\n                    return this.handleRequest({\n                        request: request,\n                        event: event\n                    });\n                // TODO(philipwalton): TypeScript errors without this typecast for\n                // some reason (probably a bug). The real type here should work but\n                // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) requestPromises.then(()=>event.ports[0].postMessage(true));\n            }\n        });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */ handleRequest({ request: request, event: event }) {\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith(\"http\")) return;\n        const sameOrigin = url.origin === location.origin;\n        const { params: params, route: route } = this.findMatchingRoute({\n            event: event,\n            request: request,\n            sameOrigin: sameOrigin,\n            url: url\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) handler = this._defaultHandlerMap.get(method);\n        if (!handler) return;\n        var msg;\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url: url,\n                request: request,\n                event: event,\n                params: params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) responsePromise = responsePromise.catch(async (err)=>{\n            // If there's a route catch handler, process that first\n            if (catchHandler) try {\n                return await catchHandler.handle({\n                    url: url,\n                    request: request,\n                    event: event,\n                    params: params\n                });\n            } catch (catchErr) {\n                if (catchErr instanceof Error) err = catchErr;\n            }\n            if (this._catchHandler) return this._catchHandler.handle({\n                url: url,\n                request: request,\n                event: event\n            });\n            throw err;\n        });\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */ findMatchingRoute({ url: url, sameOrigin: sameOrigin, request: request, event: event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({\n                url: url,\n                sameOrigin: sameOrigin,\n                request: request,\n                event: event\n            });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) // Instead of passing an empty array in as params, use undefined.\n                params = undefined;\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                Object.keys(matchResult).length === 0) // Instead of passing an empty object in as params, use undefined.\n                params = undefined;\n                else if (typeof matchResult === \"boolean\") // For the boolean value true (rather than just something truth-y),\n                // don't set params.\n                // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                params = undefined;\n                // Return early if have a match.\n                return {\n                    route: route,\n                    params: params\n                };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */ setDefaultHandler(handler, method = (0, $36faf902815edd49$export$23aa776992c05e54)) {\n        this._defaultHandlerMap.set(method, (0, $c0a03a80a6a79546$export$c3ccfd7381bc479)(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */ setCatchHandler(handler) {\n        this._catchHandler = (0, $c0a03a80a6a79546$export$c3ccfd7381bc479)(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */ registerRoute(route) {\n        if (!this._routes.has(route.method)) this._routes.set(route.method, []);\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */ unregisterRoute(route) {\n        if (!this._routes.has(route.method)) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"unregister-route-but-not-found-with-method\", {\n            method: route.method\n        });\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) this._routes.get(route.method).splice(routeIndex, 1);\n        else throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"unregister-route-route-not-registered\");\n    }\n}\n\n\n\nlet $69cdc62b4336d3df$var$defaultRouter;\nconst $69cdc62b4336d3df$export$961157d28bda6197 = ()=>{\n    if (!$69cdc62b4336d3df$var$defaultRouter) {\n        $69cdc62b4336d3df$var$defaultRouter = new (0, $9c594ba77bae5357$export$55185c17a0fcbe46)();\n        // The helpers that use the default Router assume these listeners exist.\n        $69cdc62b4336d3df$var$defaultRouter.addFetchListener();\n        $69cdc62b4336d3df$var$defaultRouter.addCacheListener();\n    }\n    return $69cdc62b4336d3df$var$defaultRouter;\n};\n\n\n\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */ function $92c9bb3eed9196ee$export$ecc3f737da4d6188(capture, handler, method) {\n    let route;\n    if (typeof capture === \"string\") {\n        const captureUrl = new URL(capture, location.href);\n        const matchCallback = ({ url: url })=>{\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6)(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) // If `capture` is a `RegExp` then `handler` and `method` must be present.\n    route = new (0, $a797a3f64ccfe22f$export$dadc8067e88ff641)(capture, handler, method);\n    else if (typeof capture === \"function\") // If `capture` is a function then `handler` and `method` must be present.\n    route = new (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6)(capture, handler, method);\n    else if (capture instanceof (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6)) route = capture;\n    else throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"unsupported-route-type\", {\n        moduleName: \"workbox-routing\",\n        funcName: \"registerRoute\",\n        paramName: \"capture\"\n    });\n    const defaultRouter = (0, $69cdc62b4336d3df$export$961157d28bda6197)();\n    defaultRouter.registerRoute(route);\n    return route;\n}\n\n\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */ function $99b855916e07f28e$export$a8c420ba18a6df2f(handler) {\n    const defaultRouter = (0, $69cdc62b4336d3df$export$961157d28bda6197)();\n    defaultRouter.setCatchHandler(handler);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */ function $a3e72ba4000fc886$export$765686f3cef8897b(handler) {\n    const defaultRouter = (0, $69cdc62b4336d3df$export$961157d28bda6197)();\n    defaultRouter.setDefaultHandler(handler);\n}\n\n\n\n\n\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nconst $069cee9b317dbf7e$var$_cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"workbox\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst $069cee9b317dbf7e$var$_createCacheName = (cacheName)=>{\n    return [\n        $069cee9b317dbf7e$var$_cacheNameDetails.prefix,\n        cacheName,\n        $069cee9b317dbf7e$var$_cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst $069cee9b317dbf7e$var$eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys($069cee9b317dbf7e$var$_cacheNameDetails))fn(key);\n};\nconst $069cee9b317dbf7e$export$ab6e80394d30c0bd = {\n    updateDetails: (details)=>{\n        $069cee9b317dbf7e$var$eachCacheNameDetail((key)=>{\n            if (typeof details[key] === \"string\") $069cee9b317dbf7e$var$_cacheNameDetails[key] = details[key];\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || $069cee9b317dbf7e$var$_createCacheName($069cee9b317dbf7e$var$_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || $069cee9b317dbf7e$var$_createCacheName($069cee9b317dbf7e$var$_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return $069cee9b317dbf7e$var$_cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || $069cee9b317dbf7e$var$_createCacheName($069cee9b317dbf7e$var$_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return $069cee9b317dbf7e$var$_cacheNameDetails.suffix;\n    }\n};\n\n\n\n\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */ function $55b9766e797232ad$export$4e57ed416e50788e(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\"use strict\";\n// @ts-ignore\ntry {\n    self[\"workbox:precaching:7.0.0\"] && _();\n} catch (e) {}\n\n\n// Name of the search parameter used to store revision info.\nconst $eadf496bbc9f3648$var$REVISION_SEARCH_PARAM = \"__WB_REVISION__\";\nfunction $eadf496bbc9f3648$export$aa68fd26e593cc7e(entry) {\n    if (!entry) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"add-to-cache-list-unexpected-type\", {\n        entry: entry\n    });\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === \"string\") {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const { revision: revision, url: url } = entry;\n    if (!url) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"add-to-cache-list-unexpected-type\", {\n        entry: entry\n    });\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set($eadf496bbc9f3648$var$REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href\n    };\n}\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */ class $bd8010094d7af326$export$e13b0f04bb63e27c {\n    constructor(){\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request: request, state: state })=>{\n            // TODO: `state` should never be undefined...\n            if (state) state.originalRequest = request;\n        };\n        this.cachedResponseWillBeUsed = async ({ event: event, state: state, cachedResponse: cachedResponse })=>{\n            if (event.type === \"install\") {\n                if (state && state.originalRequest && state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) this.notUpdatedURLs.push(url);\n                    else this.updatedURLs.push(url);\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */ class $c219a6f66607cfd2$export$43ae9051b6968b1f {\n    constructor({ precacheController: precacheController }){\n        this.cacheKeyWillBeUsed = async ({ request: request, params: params })=>{\n            // Params is type any, can't change right now.\n            /* eslint-disable */ const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) || this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */ return cacheKey ? new Request(cacheKey, {\n                headers: request.headers\n            }) : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */ const $25925c1080a7876c$var$logGroup = (groupTitle, deletedURLs)=>{\n    (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupCollapsed(groupTitle);\n    for (const url of deletedURLs)(0, $af496a6b7d1cad7b$export$af88d00dbe7f521).log(url);\n    (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupEnd();\n};\nfunction $25925c1080a7876c$export$ede821b96e04e92b(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupCollapsed(`During precaching cleanup, ` + `${deletionCount} cached ` + `request${deletionCount === 1 ? \" was\" : \"s were\"} deleted.`);\n        $25925c1080a7876c$var$logGroup(\"Deleted Cache Requests\", deletedURLs);\n        (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupEnd();\n    }\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */ function $0c4e37d22a5d017b$var$_nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) return;\n    (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupCollapsed(groupTitle);\n    for (const url of urls)(0, $af496a6b7d1cad7b$export$af88d00dbe7f521).log(url);\n    (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupEnd();\n}\nfunction $0c4e37d22a5d017b$export$45ac498dfb3a571e(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? \"\" : \"s\"}.`;\n        if (alreadyPrecachedCount > 0) message += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? \" is\" : \"s are\"} already cached.`;\n        (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupCollapsed(message);\n        $0c4e37d22a5d017b$var$_nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        $0c4e37d22a5d017b$var$_nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        (0, $af496a6b7d1cad7b$export$af88d00dbe7f521).groupEnd();\n    }\n}\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nlet $24f93f7d1f1024ef$var$supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */ function $24f93f7d1f1024ef$export$61b037b2067ac180() {\n    if ($24f93f7d1f1024ef$var$supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) try {\n            new Response(testResponse.body);\n            $24f93f7d1f1024ef$var$supportStatus = true;\n        } catch (error) {\n            $24f93f7d1f1024ef$var$supportStatus = false;\n        }\n        $24f93f7d1f1024ef$var$supportStatus = false;\n    }\n    return $24f93f7d1f1024ef$var$supportStatus;\n}\n\n\n\n\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */ async function $e0cb03b6a90586aa$export$c252eb902d57947f(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"cross-origin-copy-response\", {\n        origin: origin\n    });\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = (0, $24f93f7d1f1024ef$export$61b037b2067ac180)() ? clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\n\n\n\n\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nfunction $2d0e40b72b17139e$var$stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams)strippedURL.searchParams.delete(param);\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */ async function $2d0e40b72b17139e$export$e8c0b45b884930bd(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = $2d0e40b72b17139e$var$stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) return cache.match(request, matchOptions);\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), {\n        ignoreSearch: true\n    });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = $2d0e40b72b17139e$var$stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) return cache.match(cacheKey, matchOptions);\n    }\n    return;\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */ class $065e006bae8e02bb$export$85f6557964517f1a {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */ constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst $8d035ffdee92bb16$export$8809c7646fb39931 = new Set();\n\n\n\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */ async function $a17cfa41e77b01b7$export$8c2c97e92a341abf() {\n    for (const callback of (0, $8d035ffdee92bb16$export$8809c7646fb39931))await callback();\n}\n\n\n\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nfunction $ea647a2a701d9590$export$83e74882c5df8fe1(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n\n\n\"use strict\";\n// @ts-ignore\ntry {\n    self[\"workbox:strategies:7.0.0\"] && _();\n} catch (e) {}\n\n\nfunction $a5e474c1f37ed1a5$var$toRequest(input) {\n    return typeof input === \"string\" ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */ class $a5e474c1f37ed1a5$export$21756803dae8d5d1 {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */ constructor(strategy, options){\n        this._cacheKeys = {};\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new (0, $065e006bae8e02bb$export$85f6557964517f1a)();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins)this._pluginStateMap.set(plugin, {});\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */ async fetch(input) {\n        const { event: event } = this;\n        let request = $a5e474c1f37ed1a5$var$toRequest(input);\n        if (request.mode === \"navigate\" && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) return possiblePreloadResponse;\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback(\"fetchDidFail\") ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks(\"requestWillFetch\"))request = await cb({\n                request: request.clone(),\n                event: event\n            });\n        } catch (err) {\n            if (err instanceof Error) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"plugin-error-request-will-fetch\", {\n                thrownErrorMessage: err.message\n            });\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === \"navigate\" ? undefined : this._strategy.fetchOptions);\n            for (const callback of this.iterateCallbacks(\"fetchDidSucceed\"))fetchResponse = await callback({\n                event: event,\n                request: pluginFilteredRequest,\n                response: fetchResponse\n            });\n            return fetchResponse;\n        } catch (error) {\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) await this.runCallbacks(\"fetchDidFail\", {\n                error: error,\n                event: event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone()\n            });\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */ async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */ async cacheMatch(key) {\n        const request = $a5e474c1f37ed1a5$var$toRequest(key);\n        let cachedResponse;\n        const { cacheName: cacheName, matchOptions: matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, \"read\");\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {\n            cacheName: cacheName\n        });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        for (const callback of this.iterateCallbacks(\"cachedResponseWillBeUsed\"))cachedResponse = await callback({\n            cacheName: cacheName,\n            matchOptions: matchOptions,\n            cachedResponse: cachedResponse,\n            request: effectiveRequest,\n            event: this.event\n        }) || undefined;\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */ async cachePut(key, response) {\n        const request = $a5e474c1f37ed1a5$var$toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await (0, $ea647a2a701d9590$export$83e74882c5df8fe1)(0);\n        const effectiveRequest = await this.getCacheKey(request, \"write\");\n        if (!response) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"cache-put-with-no-response\", {\n            url: (0, $f5c0d3ad7d5ed2c2$export$ea94e9f18324709a)(effectiveRequest.url)\n        });\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) return false;\n        const { cacheName: cacheName, matchOptions: matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback(\"cacheDidUpdate\");\n        const oldResponse = hasCacheUpdateCallback ? await (0, $2d0e40b72b17139e$export$e8c0b45b884930bd)(// TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), [\n            \"__WB_REVISION__\"\n        ], matchOptions) : null;\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === \"QuotaExceededError\") await (0, $a17cfa41e77b01b7$export$8c2c97e92a341abf)();\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cacheDidUpdate\"))await callback({\n            cacheName: cacheName,\n            oldResponse: oldResponse,\n            newResponse: responseToCache.clone(),\n            request: effectiveRequest,\n            event: this.event\n        });\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */ async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks(\"cacheKeyWillBeUsed\"))effectiveRequest = $a5e474c1f37ed1a5$var$toRequest(await callback({\n                mode: mode,\n                request: effectiveRequest,\n                event: this.event,\n                // params has a type any can't change right now.\n                params: this.params\n            }));\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */ hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) return true;\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */ async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name))// TODO(philipwalton): not sure why `any` is needed. It seems like\n        // this should work with `as WorkboxPluginCallbackParam[C]`.\n        await callback(param);\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */ *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins)if (typeof plugin[name] === \"function\") {\n            const state = this._pluginStateMap.get(plugin);\n            const statefulCallback = (param)=>{\n                const statefulParam = Object.assign(Object.assign({}, param), {\n                    state: state\n                });\n                // TODO(philipwalton): not sure why `any` is needed. It seems like\n                // this should work with `as WorkboxPluginCallbackParam[C]`.\n                return plugin[name](statefulParam);\n            };\n            yield statefulCallback;\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */ waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */ async doneWaiting() {\n        let promise;\n        while(promise = this._extendLifetimePromises.shift())await promise;\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */ destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */ async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks(\"cacheWillUpdate\")){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) break;\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) responseToCache = undefined;\n        }\n        return responseToCache;\n    }\n}\n\n\n\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */ class $defee0df2623e975$export$88a6666ae2487175 {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */ constructor(options = {}){\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */ this.cacheName = (0, $069cee9b317dbf7e$export$ab6e80394d30c0bd).getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */ this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */ this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */ this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */ handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */ handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) options = {\n            event: options,\n            request: options.request\n        };\n        const event = options.event;\n        const request = typeof options.request === \"string\" ? new Request(options.request) : options.request;\n        const params = \"params\" in options ? options.params : undefined;\n        const handler = new (0, $a5e474c1f37ed1a5$export$21756803dae8d5d1)(this, {\n            event: event,\n            request: request,\n            params: params\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks(\"handlerWillStart\", {\n            event: event,\n            request: request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === \"error\") throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"no-response\", {\n                url: request.url\n            });\n        } catch (error) {\n            if (error instanceof Error) for (const callback of handler.iterateCallbacks(\"handlerDidError\")){\n                response = await callback({\n                    error: error,\n                    event: event,\n                    request: request\n                });\n                if (response) break;\n            }\n            if (!response) throw error;\n        }\n        for (const callback of handler.iterateCallbacks(\"handlerWillRespond\"))response = await callback({\n            event: event,\n            request: request,\n            response: response\n        });\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        } catch (error) {\n        // Ignore errors, as response errors should be caught via the `response`\n        // promise above. The `done` promise will only throw for errors in\n        // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks(\"handlerDidRespond\", {\n                event: event,\n                request: request,\n                response: response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) error = waitUntilError;\n        }\n        await handler.runCallbacks(\"handlerDidComplete\", {\n            event: event,\n            request: request,\n            response: response,\n            error: error\n        });\n        handler.destroy();\n        if (error) throw error;\n    }\n}\n /**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */ \n\n\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */ class $1ea3b1a96f44b9ae$export$7ca9d898625df919 extends (0, $defee0df2623e975$export$88a6666ae2487175) {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */ constructor(options = {}){\n        options.cacheName = (0, $069cee9b317dbf7e$export$ab6e80394d30c0bd).getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push($1ea3b1a96f44b9ae$export$7ca9d898625df919.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) return response;\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === \"install\") return await this._handleInstall(request, handler);\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = handler.params || {};\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== \"no-cors\" ? integrityInRequest || integrityInManifest : undefined\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest && noIntegrityConflict && request.mode !== \"no-cors\") {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n            }\n        } else // This shouldn't normally happen, but there are edge cases:\n        // https://github.com/GoogleChrome/workbox/issues/1441\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"missing-precache-entry\", {\n            cacheName: this.cacheName,\n            url: request.url\n        });\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) // Throwing here will lead to the `install` handler failing, which\n        // we want to do if *any* of the responses aren't safe to cache.\n        throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"bad-precaching-response\", {\n            url: request.url,\n            status: response.status\n        });\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */ _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()){\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === $1ea3b1a96f44b9ae$export$7ca9d898625df919.copyRedirectedCacheableResponsesPlugin) continue;\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === $1ea3b1a96f44b9ae$export$7ca9d898625df919.defaultPrecacheCacheabilityPlugin) defaultPluginIndex = index;\n            if (plugin.cacheWillUpdate) cacheWillUpdatePluginCount++;\n        }\n        if (cacheWillUpdatePluginCount === 0) this.plugins.push($1ea3b1a96f44b9ae$export$7ca9d898625df919.defaultPrecacheCacheabilityPlugin);\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) // Only remove the default plugin; multiple custom plugins are allowed.\n        this.plugins.splice(defaultPluginIndex, 1);\n    // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\n$1ea3b1a96f44b9ae$export$7ca9d898625df919.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate ({ response: response }) {\n        if (!response || response.status >= 400) return null;\n        return response;\n    }\n};\n$1ea3b1a96f44b9ae$export$7ca9d898625df919.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate ({ response: response }) {\n        return response.redirected ? await (0, $e0cb03b6a90586aa$export$c252eb902d57947f)(response) : response;\n    }\n};\n\n\n\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */ class $0b90a518eb31b870$export$dbe0c4a77e4ca482 {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */ constructor({ cacheName: cacheName, plugins: plugins = [], fallbackToNetwork: fallbackToNetwork = true } = {}){\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new (0, $1ea3b1a96f44b9ae$export$7ca9d898625df919)({\n            cacheName: (0, $069cee9b317dbf7e$export$ab6e80394d30c0bd).getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new (0, $c219a6f66607cfd2$export$43ae9051b6968b1f)({\n                    precacheController: this\n                })\n            ],\n            fallbackToNetwork: fallbackToNetwork\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */ get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */ precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener(\"install\", this.install);\n            self.addEventListener(\"activate\", this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */ addToCacheList(entries) {\n        const urlsToWarnAbout = [];\n        for (const entry of entries){\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === \"string\") urlsToWarnAbout.push(entry);\n            else if (entry && entry.revision === undefined) urlsToWarnAbout.push(entry.url);\n            const { cacheKey: cacheKey, url: url } = (0, $eadf496bbc9f3648$export$aa68fd26e593cc7e)(entry);\n            const cacheMode = typeof entry !== \"string\" && entry.revision ? \"reload\" : \"default\";\n            if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"add-to-cache-list-conflicting-entries\", {\n                firstEntry: this._urlsToCacheKeys.get(url),\n                secondEntry: cacheKey\n            });\n            if (typeof entry !== \"string\" && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"add-to-cache-list-conflicting-integrities\", {\n                    url: url\n                });\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` + `info: ${urlsToWarnAbout.join(\", \")}\\nThis is generally NOT safe. ` + `Learn more at https://bit.ly/wb-precache`;\n                // Use console directly to display this warning without bloating\n                // bundle sizes by pulling in all of the logger codebase in prod.\n                console.warn(warningMessage);\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */ install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return (0, $55b9766e797232ad$export$4e57ed416e50788e)(event, async ()=>{\n            const installReportPlugin = new (0, $bd8010094d7af326$export$e13b0f04bb63e27c)();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys){\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity: integrity,\n                    cache: cacheMode,\n                    credentials: \"same-origin\"\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: {\n                        cacheKey: cacheKey\n                    },\n                    request: request,\n                    event: event\n                }));\n            }\n            const { updatedURLs: updatedURLs, notUpdatedURLs: notUpdatedURLs } = installReportPlugin;\n            return {\n                updatedURLs: updatedURLs,\n                notUpdatedURLs: notUpdatedURLs\n            };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */ activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return (0, $55b9766e797232ad$export$4e57ed416e50788e)(event, async ()=>{\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests)if (!expectedCacheKeys.has(request.url)) {\n                await cache.delete(request);\n                deletedURLs.push(request.url);\n            }\n            return {\n                deletedURLs: deletedURLs\n            };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */ getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */ getCachedURLs() {\n        return [\n            ...this._urlsToCacheKeys.keys()\n        ];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */ getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */ getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */ async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */ createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) throw new (0, $3283ae9bfe0b8fa4$export$86951c8e0bcb03a3)(\"non-precached-url\", {\n            url: url\n        });\n        return (options)=>{\n            options.request = new Request(url);\n            options.params = Object.assign({\n                cacheKey: cacheKey\n            }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\n\n\n\nlet $b59b39ea92e9aa1e$var$precacheController;\nconst $b59b39ea92e9aa1e$export$4978f54beed18527 = ()=>{\n    if (!$b59b39ea92e9aa1e$var$precacheController) $b59b39ea92e9aa1e$var$precacheController = new (0, $0b90a518eb31b870$export$dbe0c4a77e4ca482)();\n    return $b59b39ea92e9aa1e$var$precacheController;\n};\n\n\n\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */ function $a494ee678955f1cb$export$19ec5365ea6ce8cf(plugins) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    precacheController.strategy.plugins.push(...plugins);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ /*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nfunction $acee7c063beb82ab$export$c46ef66fc2eb2089(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [\n        ...urlObject.searchParams.keys()\n    ])if (ignoreURLParametersMatching.some((regExp)=>regExp.test(paramName))) urlObject.searchParams.delete(paramName);\n    return urlObject;\n}\n\n\n\nfunction* $d2639561da488253$export$63f63caef13f3e75(url, { ignoreURLParametersMatching: ignoreURLParametersMatching = [\n    /^utm_/,\n    /^fbclid$/\n], directoryIndex: directoryIndex = \"index.html\", cleanURLs: cleanURLs = true, urlManipulation: urlManipulation } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = \"\";\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = (0, $acee7c063beb82ab$export$c46ef66fc2eb2089)(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith(\"/\")) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += \".html\";\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({\n            url: urlObject\n        });\n        for (const urlToAttempt of additionalURLs)yield urlToAttempt.href;\n    }\n}\n\n\n\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */ class $098a7a03419656b9$export$f2b9051a630d9267 extends (0, $0440a5d6d8eea4e0$export$e7b0ac011bb776c6) {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */ constructor(precacheController, options){\n        const match = ({ request: request })=>{\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of (0, $d2639561da488253$export$63f63caef13f3e75)(request.url, options)){\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return {\n                        cacheKey: cacheKey,\n                        integrity: integrity\n                    };\n                }\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\n\n\n\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */ function $5bd4e33881d3a369$export$61ac59f68e6d5762(options) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    const precacheRoute = new (0, $098a7a03419656b9$export$f2b9051a630d9267)(precacheController, options);\n    (0, $92c9bb3eed9196ee$export$ecc3f737da4d6188)(precacheRoute);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nconst $c44152a5a6946703$var$SUBSTRING_TO_FIND = \"-precache-\";\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */ const $c44152a5a6946703$export$945364d6841ba7b9 = async (currentPrecacheName, substringToFind = $c44152a5a6946703$var$SUBSTRING_TO_FIND)=>{\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName)=>{\n        return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName)=>self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\n\n\n\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */ function $05a641c68aa860c1$export$9aee3c066fc575f8() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener(\"activate\", (event)=>{\n        const cacheName = (0, $069cee9b317dbf7e$export$ab6e80394d30c0bd).getPrecacheName();\n        event.waitUntil((0, $c44152a5a6946703$export$945364d6841ba7b9)(cacheName).then((cachesDeleted)=>{}));\n    });\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */ function $f915a9f3eda0f620$export$e8e017dbc8f67615(url) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    return precacheController.createHandlerBoundToURL(url);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */ function $a70a6fea8f6c3f5c$export$fe70f1673d75b87e(url) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    return precacheController.getCacheKeyForURL(url);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */ function $c65a0059bf83d4db$export$fa09cbbe4738e138(request) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    return precacheController.matchPrecache(request);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */ function $4537010a6e49b7fa$export$66d0ef922313a13f(entries) {\n    const precacheController = (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    precacheController.precache(entries);\n}\n\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */ function $0bf9114c8f81876b$export$cff65d96c780d064(entries, options) {\n    (0, $4537010a6e49b7fa$export$66d0ef922313a13f)(entries);\n    (0, $5bd4e33881d3a369$export$61ac59f68e6d5762)(options);\n}\n\n\n\n\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */ class $9a8edd66d356caa9$export$ff4128775b2e3e58 {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */ constructor({ fallbackURL: fallbackURL, precacheController: precacheController }){\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */ this.handlerDidError = ()=>this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController = precacheController || (0, $b59b39ea92e9aa1e$export$4978f54beed18527)();\n    }\n}\n\n\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \n // * * * IMPORTANT! * * *\n // ------------------------------------------------------------------------- //\n // jdsoc type definitions cannot be declared above TypeScript definitions or\n // they'll be stripped from the built `.js` files, and they'll only be in the\n // `d.ts` files, which aren't read by the jsdoc generator. As a result we\n // have to put declare them below.\n /**\n * @typedef {Object} InstallResult\n * @property {Array<string>} updatedURLs List of URLs that were updated during\n * installation.\n * @property {Array<string>} notUpdatedURLs List of URLs that were already up to\n * date.\n *\n * @memberof workbox-precaching\n */  /**\n * @typedef {Object} CleanupResult\n * @property {Array<string>} deletedCacheRequests List of URLs that were deleted\n * while cleaning up the cache.\n *\n * @memberof workbox-precaching\n */  /**\n * @typedef {Object} PrecacheEntry\n * @property {string} url URL to precache.\n * @property {string} [revision] Revision information for the URL.\n * @property {string} [integrity] Integrity metadata that will be used when\n * making the network request for the URL.\n *\n * @memberof workbox-precaching\n */  /**\n * The \"urlManipulation\" callback can be used to determine if there are any\n * additional permutations of a URL that should be used to check against\n * the available precached files.\n *\n * For example, Workbox supports checking for '/index.html' when the URL\n * '/' is provided. This callback allows additional, custom checks.\n *\n * @callback ~urlManipulation\n * @param {Object} context\n * @param {URL} context.url The request's URL.\n * @return {Array<URL>} To add additional urls to test, return an Array of\n * URLs. Please note that these **should not be strings**, but URL objects.\n *\n * @memberof workbox-precaching\n */ \n\n\n\n\n\nfunction $be54d8e7a0d8ad61$export$86641f86553f00db(event) {\n    return event.request.mode === \"navigate\";\n}\nconst $be54d8e7a0d8ad61$export$7725882a84549c2d = new NetworkFirst({\n    cacheName: cacheNames.precache,\n    networkTimeoutSeconds: 5,\n    plugins: [\n        new CacheableResponsePlugin({\n            statuses: [\n                200\n            ]\n        })\n    ]\n});\nasync function $be54d8e7a0d8ad61$var$install() {\n    const cache = await caches.open((0, $2039b88b1be162b9$export$83d89fbfd8236492));\n    await cache.addAll((0, $2039b88b1be162b9$export$e538f94cc8cf4db8));\n    console.log(`Cached ${(0, $2039b88b1be162b9$export$e538f94cc8cf4db8).length} files.`);\n}\naddEventListener(\"install\", (e)=>e.waitUntil($be54d8e7a0d8ad61$var$install()));\nasync function $be54d8e7a0d8ad61$var$activate() {\n    const keys = await caches.keys();\n    await Promise.all(keys.map((key)=>key !== (0, $2039b88b1be162b9$export$83d89fbfd8236492) && caches.delete(key)));\n}\naddEventListener(\"activate\", (e)=>e.waitUntil($be54d8e7a0d8ad61$var$activate()));\n(0, $92c9bb3eed9196ee$export$ecc3f737da4d6188)(({ event: event })=>$be54d8e7a0d8ad61$export$86641f86553f00db(event), $be54d8e7a0d8ad61$export$7725882a84549c2d);\n(0, $99b855916e07f28e$export$a8c420ba18a6df2f)(({ event: event })=>{\n    if ($be54d8e7a0d8ad61$export$86641f86553f00db(event)) return caches.match((0, $a70a6fea8f6c3f5c$export$fe70f1673d75b87e)(\"/200.html\") || (0, $a70a6fea8f6c3f5c$export$fe70f1673d75b87e)(\"/index.html\"));\n    return Response.error();\n});\n\n})();\n//# sourceMappingURL=sw.js.map\n","import {_register} from '@parcel/service-worker';\nconst manifest = [\"/learn-swedish/index.html\",\"/learn-swedish/manifest.webmanifest\",\"/learn-swedish/android-chrome-192x192.626f50e2.png\",\"/learn-swedish/android-chrome-512x512.d6bf5e41.png\",\"/learn-swedish/favicon-32x32.e142a89f.png\",\"/learn-swedish/favicon-16x16.8ee22d3e.png\",\"/learn-swedish/apple-touch-icon.bcec069d.png\",\"/learn-swedish/index.4ee8d03c.css\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCRc4EsA.8895cd13.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fABc4EsA.303b9afa.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCBc4EsA.73ef051e.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fBxc4EsA.962b7627.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fCxc4EsA.6fb53ea7.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fChc4EsA.51d7b0c4.woff2\",\"/learn-swedish/KFOlCnqEu92Fr1MmSU5fBBc4.d07a8413.woff2\",\"/learn-swedish/index.9aea524e.js\",\"/learn-swedish/index.e1fa17d3.js\"];\nconst version = \"a787ad97\";\n_register(manifest, version);\n","export let manifest = [];\nexport let version = '';\n\n// Called by the runtime.\nexport function _register(m, v) {\n  manifest = m;\n  version = v;\n}\n","import { manifest, version } from '@parcel/service-worker';\nimport { registerRoute, setCatchHandler } from 'workbox-routing';\nimport { getCacheKeyForURL } from 'workbox-precaching';\n\nexport function isNav(event) {\n  return event.request.mode === 'navigate'\n};\n\nexport const NETWORK_HANDLER = new NetworkFirst({\n\tcacheName: cacheNames.precache,\n\tnetworkTimeoutSeconds: 5,\n\tplugins: [\n\t\tnew CacheableResponsePlugin({\n\t\t\tstatuses: [200],\n\t\t}),\n\t],\n});\n\nasync function install() {\n  const cache = await caches.open(version);\n  await cache.addAll(manifest);\n  console.log(`Cached ${manifest.length} files.`);\n}\naddEventListener('install', e => e.waitUntil(install()));\n\nasync function activate() {\n  const keys = await caches.keys();\n  await Promise.all(\n    keys.map(key => key !== version && caches.delete(key))\n  );\n}\naddEventListener('activate', e => e.waitUntil(activate()));\n\nregisterRoute(({ event }) => isNav(event), NETWORK_HANDLER);\n\nsetCatchHandler(({ event }) => {\n\tif (isNav(event)) {\n\t\treturn caches.match(\n\t\t\tgetCacheKeyForURL('/200.html') || getCacheKeyForURL('/index.html')\n\t\t);\n\t}\n\treturn Response.error();\n});","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { NavigationRoute, } from './NavigationRoute.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { registerRoute } from './registerRoute.js';\nimport { Route } from './Route.js';\nimport { Router } from './Router.js';\nimport { setCatchHandler } from './setCatchHandler.js';\nimport { setDefaultHandler } from './setDefaultHandler.js';\nimport './_version.js';\n/**\n * @module workbox-routing\n */\nexport { NavigationRoute, RegExpRoute, registerRoute, Route, Router, setCatchHandler, setDefaultHandler, };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addPlugins } from './addPlugins.js';\nimport { addRoute } from './addRoute.js';\nimport { cleanupOutdatedCaches } from './cleanupOutdatedCaches.js';\nimport { createHandlerBoundToURL } from './createHandlerBoundToURL.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport { matchPrecache } from './matchPrecache.js';\nimport { precache } from './precache.js';\nimport { precacheAndRoute } from './precacheAndRoute.js';\nimport { PrecacheController } from './PrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport { PrecacheFallbackPlugin } from './PrecacheFallbackPlugin.js';\nimport './_version.js';\n/**\n * Most consumers of this module will want to use the\n * {@link workbox-precaching.precacheAndRoute}\n * method to add assets to the cache and respond to network requests with these\n * cached assets.\n *\n * If you require more control over caching and routing, you can use the\n * {@link workbox-precaching.PrecacheController}\n * interface.\n *\n * @module workbox-precaching\n */\nexport { addPlugins, addRoute, cleanupOutdatedCaches, createHandlerBoundToURL, getCacheKeyForURL, matchPrecache, precache, precacheAndRoute, PrecacheController, PrecacheRoute, PrecacheStrategy, PrecacheFallbackPlugin, };\nexport * from './_types.js';\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */\nfunction addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\nexport { addPlugins };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */\nfunction getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n// * * * IMPORTANT! * * *\n// ------------------------------------------------------------------------- //\n// jdsoc type definitions cannot be declared above TypeScript definitions or\n// they'll be stripped from the built `.js` files, and they'll only be in the\n// `d.ts` files, which aren't read by the jsdoc generator. As a result we\n// have to put declare them below.\n/**\n * @typedef {Object} InstallResult\n * @property {Array<string>} updatedURLs List of URLs that were updated during\n * installation.\n * @property {Array<string>} notUpdatedURLs List of URLs that were already up to\n * date.\n *\n * @memberof workbox-precaching\n */\n/**\n * @typedef {Object} CleanupResult\n * @property {Array<string>} deletedCacheRequests List of URLs that were deleted\n * while cleaning up the cache.\n *\n * @memberof workbox-precaching\n */\n/**\n * @typedef {Object} PrecacheEntry\n * @property {string} url URL to precache.\n * @property {string} [revision] Revision information for the URL.\n * @property {string} [integrity] Integrity metadata that will be used when\n * making the network request for the URL.\n *\n * @memberof workbox-precaching\n */\n/**\n * The \"urlManipulation\" callback can be used to determine if there are any\n * additional permutations of a URL that should be used to check against\n * the available precached files.\n *\n * For example, Workbox supports checking for '/index.html' when the URL\n * '/' is provided. This callback allows additional, custom checks.\n *\n * @callback ~urlManipulation\n * @param {Object} context\n * @param {URL} context.url The request's URL.\n * @return {Array<URL>} To add additional urls to test, return an Array of\n * URLs. Please note that these **should not be strings**, but URL objects.\n *\n * @memberof workbox-precaching\n */\n"],"names":["$69cdc62b4336d3df$var$defaultRouter","$24f93f7d1f1024ef$var$supportStatus","$b59b39ea92e9aa1e$var$precacheController","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$2039b88b1be162b9$export$e538f94cc8cf4db8","$2039b88b1be162b9$export$83d89fbfd8236492","$be54d8e7a0d8ad61$exports","$be54d8e7a0d8ad61$export$86641f86553f00db","$be54d8e7a0d8ad61$export$7725882a84549c2d","self","_","$a1b33374bd859908$export$9b6405cf8a618e2b","code","args","msg","length","JSON","stringify","$3283ae9bfe0b8fa4$export$86951c8e0bcb03a3","Error","constructor","errorCode","details","message","name","$c0a03a80a6a79546$export$c3ccfd7381bc479","handler","handle","$0440a5d6d8eea4e0$export$e7b0ac011bb776c6","match","method","setCatchHandler","catchHandler","$a797a3f64ccfe22f$export$dadc8067e88ff641","regExp","url","result","exec","href","origin","location","index","slice","$f5c0d3ad7d5ed2c2$export$ea94e9f18324709a","urlObj","URL","String","replace","RegExp","$9c594ba77bae5357$export$55185c17a0fcbe46","_routes","Map","_defaultHandlerMap","routes","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","err","reject","_catchHandler","catch","catchErr","matchResult","Array","isArray","undefined","keys","setDefaultHandler","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","$69cdc62b4336d3df$export$961157d28bda6197","$069cee9b317dbf7e$var$_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","$069cee9b317dbf7e$var$_createCacheName","cacheName","filter","value","join","$069cee9b317dbf7e$var$eachCacheNameDetail","fn","key","$069cee9b317dbf7e$export$ab6e80394d30c0bd","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","$55b9766e797232ad$export$4e57ed416e50788e","asyncFn","returnPromise","$bd8010094d7af326$export$e13b0f04bb63e27c","updatedURLs","notUpdatedURLs","handlerWillStart","state","originalRequest","cachedResponseWillBeUsed","cachedResponse","$c219a6f66607cfd2$export$43ae9051b6968b1f","precacheController","cacheKeyWillBeUsed","cacheKey","_precacheController","getCacheKeyForURL","headers","$e0cb03b6a90586aa$export$c252eb902d57947f","response","modifier","responseURL","clonedResponse","clone","responseInit","Headers","status","statusText","modifiedResponseInit","body","testResponse","Response","error","blob","$2d0e40b72b17139e$var$stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","$2d0e40b72b17139e$export$e8c0b45b884930bd","cache","matchOptions","strippedRequestURL","keysOptions","assign","ignoreSearch","cacheKeys","strippedCacheKeyURL","$065e006bae8e02bb$export$85f6557964517f1a","promise","resolve","$8d035ffdee92bb16$export$8809c7646fb39931","Set","$a17cfa41e77b01b7$export$8c2c97e92a341abf","callback","$a5e474c1f37ed1a5$var$toRequest","input","$a5e474c1f37ed1a5$export$21756803dae8d5d1","strategy","options","plugin","_cacheKeys","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","fetch","mode","FetchEvent","preloadResponse","possiblePreloadResponse","hasCallback","cb","iterateCallbacks","thrownErrorMessage","pluginFilteredRequest","fetchResponse","fetchOptions","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","effectiveRequest","getCacheKey","multiMatchOptions","caches","setTimeout","responseToCache","_ensureResponseSafeToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","statefulCallback","statefulParam","doneWaiting","shift","destroy","pluginsUsed","$defee0df2623e975$export$88a6666ae2487175","responseDone","handleAll","_getResponse","handlerDone","_awaitComplete","_handle","waitUntilError","$1ea3b1a96f44b9ae$export$7ca9d898625df919","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","_useDefaultCacheabilityPluginIfNeeded","wasCached","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","redirected","$0b90a518eb31b870$export$dbe0c4a77e4ca482","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","revision","urlObject","cacheKeyURL","originalURL","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","$b59b39ea92e9aa1e$export$4978f54beed18527","$a70a6fea8f6c3f5c$export$fe70f1673d75b87e","NetworkFirst","cacheNames","networkTimeoutSeconds","CacheableResponsePlugin","statuses","$be54d8e7a0d8ad61$var$install","addAll","log","$be54d8e7a0d8ad61$var$activate","capture","captureUrl","moduleName","funcName","paramName","defaultRouter"],"version":3,"file":"sw.js.map"}